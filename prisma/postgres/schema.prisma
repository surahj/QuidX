// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/postgres/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  pk                         Int                          @id @default(autoincrement())
  id                         String                       @unique @default(uuid())
  email                      String                       @unique
  password                   String
  role                       Role                         @default(USER)
  isBlocked                  Boolean                      @default(false)
  isEmailVerified            Boolean?                     @default(false) @map("is_email_verified")
  profileId                  String                       @unique
  profile                    Profile                      @relation(fields: [profileId], references: [id])
  chats                      Chat[]
  token                      Token?
  credits                    Int?                          @default(50)
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("update_at")

  @@map("users")
  @@index(fields: [email])
}

model Guest {
  pk                         Int                          @id @default(autoincrement())
  id                         String                       @unique @default(uuid())
  email                      String
  message                    String?                      

  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("update_at")

  @@map("guests")
}

model Profile {
  pk               Int       @id @default(autoincrement())
  id               String    @unique @default(uuid())
  email            String?   @unique
  avatar           String?
  phoneNumber      String?   @map("phone_number")
  firstName        String?   @map("first_name")
  lastName         String?   @map("last_name")
  gender           Gender?
  dateOfBirth      DateTime?
  city             String?
  stateOfResidence String?   @map("state_of_residence")
  isNotify         Boolean?  @default(false)
  user             User?


  @@unique([pk, id])
  @@map("profiles")
}


model Chat {
  pk                          Int       @id @default(autoincrement())
  id                          String    @unique @default(uuid())
  userId                      String
  user                        User      @relation(fields: [userId], references: [id])
  title                       String?   @default("New Chat")
  messages                    Message[]

  createdAt                   DateTime  @default(now()) @map("created_at")
  updatedAt                   DateTime  @updatedAt @map("update_at")

  @@unique([pk, id])
  @@map("chat")
  @@index(fields: [id])
}

model Message {
  pk                          Int     @id @default(autoincrement())
  id                          String  @unique @default(uuid())
  chatId                      String
  chat                        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role                        String
  content                     String
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("update_at")

  @@unique([pk, id])
  @@map("message")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

model Token {
  pk                          Int     @id @default(autoincrement())
  id                          String  @unique @default(uuid())
  userId                      String?  @unique
  user                        User?     @relation(fields: [userId], references: [id])
  expiryDate                  DateTime?
  token                       String
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("update_at")

  @@unique([pk, id])
  @@map("token")
}

